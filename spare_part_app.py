# To run this app, ensure 'streamlit' is installed via: pip install streamlit
import pandas as pd
import os
from datetime import datetime
import sys

try:
    import streamlit as st
except ModuleNotFoundError:
    st = None
    sys.stderr.write("Streamlit is not installed. Please run 'pip install streamlit' to use the app.\n")

if st:
    # Initial Setup
    st.set_page_config(page_title="Spare Part Manager", layout="wide")
    st.title("üì¶ Spare Part Management System")

    # File Storage
    DB_FILE = "spare_parts.csv"
    BACKUP_FILE = "backup_spare_parts.csv"

    if not os.path.exists(DB_FILE):
        df = pd.DataFrame(columns=["Part No", "Name", "Category", "Stock", "Image Path", "History"])
        df.to_csv(DB_FILE, index=False)
    else:
        df = pd.read_csv(DB_FILE)

    def save_data():
        df.to_csv(BACKUP_FILE, index=False)  # backup before save
        df.to_csv(DB_FILE, index=False)

    def restore_backup():
        if os.path.exists(BACKUP_FILE):
            return pd.read_csv(BACKUP_FILE)
        return df

    # Sidebar: Navigation
    menu = st.sidebar.radio("üìÇ ‡πÄ‡∏°‡∏ô‡∏π", [
        "üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
        "üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ / ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà",
        "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç / ‡∏•‡∏ö ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà",
        "üì§ ‡πÄ‡∏ö‡∏¥‡∏Å / ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πä‡∏≠‡∏Å",
        "üìù ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏ï‡πä‡∏≠‡∏Å",
        "‚ôªÔ∏è ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
        "üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà",
        "üìä Dashboard",
        "üìÅ Export ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"
    ])

    # Page 1: List with Images
    if menu == "üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û":
        st.subheader("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà")
        for i, row in df.iterrows():
            col1, col2 = st.columns([1, 4])
            with col1:
                image_path = os.path.join("images", str(row["Image Path"])) if row["Image Path"] else None
                if image_path and os.path.exists(image_path):
                    st.image(image_path, width=100)
                else:
                    st.warning("No image")
            with col2:
                st.markdown(f"**{row['Part No']} - {row['Name']}**")
                st.caption(f"‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {row['Category']} | ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {row['Stock']}")

    # Page 2: Filter
    elif menu == "üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ / ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà":
        st.subheader("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà")
        search = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ Part No ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ä‡∏∑‡πà‡∏≠")
        cat_filter = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", ["All"] + sorted(df["Category"].dropna().unique()))

        filtered = df[df["Part No"].str.contains(search, case=False, na=False) | df["Name"].str.contains(search, case=False, na=False)]
        if cat_filter != "All":
            filtered = filtered[filtered["Category"] == cat_filter]

        st.dataframe(filtered)

    # Page 3: Add/Edit/Delete
    elif menu == "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç / ‡∏•‡∏ö ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà":
        st.subheader("‡πÄ‡∏û‡∏¥‡πà‡∏° / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç / ‡∏•‡∏ö")
        action = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥", ["‡πÄ‡∏û‡∏¥‡πà‡∏°", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", "‡∏•‡∏ö"])
        selected_part = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ/‡∏•‡∏ö)", ["-"] + list(df["Part No"]))

        part_no = st.text_input("Part No")
        name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà")
        category = st.text_input("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
        stock = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", 0)
        image_path = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡πÄ‡∏ä‡πà‡∏ô 1.png) ‡πÇ‡∏î‡∏¢‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå images/")

        if action == "‡πÄ‡∏û‡∏¥‡πà‡∏°" and st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"):
            df.loc[len(df)] = [part_no, name, category, stock, image_path, ""]
            save_data()
            st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

        elif action == "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" and selected_part != "-" and st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"):
            idx = df[df["Part No"] == selected_part].index[0]
            df.loc[idx] = [part_no, name, category, stock, image_path, df.loc[idx, "History"]]
            save_data()
            st.success("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        elif action == "‡∏•‡∏ö" and selected_part != "-" and st.button("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"):
            df.drop(df[df["Part No"] == selected_part].index, inplace=True)
            save_data()
            st.success("‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    # Page 4: Issue/Add Stock
    elif menu == "üì§ ‡πÄ‡∏ö‡∏¥‡∏Å / ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πä‡∏≠‡∏Å":
        st.subheader("‡πÄ‡∏ö‡∏¥‡∏Å / ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πä‡∏≠‡∏Å")
        selected_name = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà", df["Name"])
        idx = df[df["Name"] == selected_name].index[0]

        st.markdown(f"**Part No:** {df.loc[idx, 'Part No']}")
        st.markdown(f"**‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:** {df.loc[idx, 'Stock']}")
        img_path = os.path.join("images", str(df.loc[idx, "Image Path"]))
        if os.path.exists(img_path):
            st.image(img_path, width=150)
        else:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")

        qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", 0)
        user = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")
        action = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", ["‡πÄ‡∏ö‡∏¥‡∏Å", "‡πÄ‡∏ï‡∏¥‡∏°"])

        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"):
            current_stock = df.loc[idx, "Stock"]
            new_stock = current_stock - qty if action == "‡πÄ‡∏ö‡∏¥‡∏Å" else current_stock + qty
            df.loc[idx, "Stock"] = new_stock
            history_entry = f"{datetime.now()} | {action} {qty} by {user}\n"
            existing_history = str(df.loc[idx, "History"]) if pd.notnull(df.loc[idx, "History"]) else ""
            df.loc[idx, "History"] = existing_history + history_entry
            save_data()
            st.success("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

    # Page 4.5: Edit Stock History
    elif menu == "üìù ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏ï‡πä‡∏≠‡∏Å":
        st.subheader("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏ï‡πä‡∏≠‡∏Å")
        selected_name = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥", df["Name"])
        idx = df[df["Name"] == selected_name].index[0]

        st.markdown(f"**Part No:** {df.loc[idx, 'Part No']}")
        st.markdown(f"**Stock ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:** {df.loc[idx, 'Stock']}")
        history_text = st.text_area("‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏î‡∏¥‡∏°", value=df.loc[idx, "History"], height=200)

        new_stock = st.number_input("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ï‡πä‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)", value=int(df.loc[idx, "Stock"]))

        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"):
            df.loc[idx, "History"] = history_text
            df.loc[idx, "Stock"] = new_stock
            save_data()
            st.success("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    # Page 4.75: Restore
    elif menu == "‚ôªÔ∏è ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î":
        st.subheader("‚ôªÔ∏è ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        if st.button("üîÑ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå backup_spare_parts.csv"):
            df = restore_backup()
            save_data()
            st.success("‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    # Page 5: Upload CSV
    elif menu == "üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà":
        st.subheader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà")
        uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå .csv ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤", type=["csv"])
        if uploaded_file is not None:
            try:
                new_df = pd.read_csv(uploaded_file, encoding="utf-8")
                if new_df.empty:
                    raise ValueError("CSV file is empty")
            except (UnicodeDecodeError, ValueError):
                try:
                    new_df = pd.read_csv(uploaded_file, encoding="ISO-8859-1")
                    if new_df.empty:
                        raise ValueError("CSV file is empty")
                except Exception as e:
                    st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")
                    new_df = None

            if new_df is not None:
                required_cols = ["Part No", "Name", "Category", "Stock", "Image Path", "History"]
                if all(col in new_df.columns for col in required_cols):
                    df = pd.concat([df, new_df], ignore_index=True)
                    save_data()
                    st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                else:
                    st.error(f"‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: {required_cols}")

    # Page 6: Dashboard
    elif menu == "üìä Dashboard":
        st.subheader("Dashboard")
        st.metric("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", len(df))
        st.metric("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", len(df["Category"].unique()))
        st.metric("‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏£‡∏ß‡∏°", df["Stock"].sum())
        st.bar_chart(df.groupby("Category")["Stock"].sum())

    # Page 7: Export
    elif menu == "üìÅ Export ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô":
        st.subheader("Export ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
        file_name = f"spare_part_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        df.to_excel(file_name, index=False)
        with open(file_name, "rb") as f:
            st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", f, file_name, mime="application/vnd.ms-excel")
else:
    sys.stderr.write("Streamlit is not available in this environment. Please run this code in your local machine with Streamlit installed.\n")
